name: Publish OpenSSL QPM Package

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      module_id: ssl
      build_path: openssl/build/arm64-v8a/lib

    steps:
      - uses: actions/checkout@v2
        name: Checkout
        with:
          submodules: true
          lfs: true
      - name: Install Powershell
        run: sudo apt-get install -y powershell

      - name: Setup NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r23

      - uses: seanmiddleditch/gha-setup-ninja@v3

      - name: Create ndkpath.txt
        run: |
          echo "$ANDROID_NDK_LATEST_HOME" > ${GITHUB_WORKSPACE}/ndkpath.txt
          cat ${GITHUB_WORKSPACE}/ndkpath.txt

      - name: Build
        run: |
          cd ${GITHUB_WORKSPACE}
          chmod +x ./qpm_build.sh
          export ANDROID_NDK_ROOT=${{ steps.setup-ndk.outputs.ndk-path }}
          export NDK=${{ steps.setup-ndk.outputs.ndk-path }}
          ./qpm_build.sh


  # publish_libs:

  #   runs-on: ubuntu-latest
  #   needs: build
  #   # TODO: Matrix for libcurl

  #   steps:
      - name: Copy qpm.json
        run: |
          cd ${GITHUB_WORKSPACE}
          cp ./openssl_qpm.json ./qpm.json

      - name: Get Tag Version
        id: get_tag_version
        run: |
          echo ${GITHUB_REF#refs/tags/}
          echo ::set-output name=TAG::${GITHUB_REF#refs/tags/}
          echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/v}

      - name: Get QPM
        if: steps.cache-qpm.outputs.cache-hit != 'true'
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: cargo-build.yml
          name: linux-qpm-rust
          path: QPM
          repo: RedBrumbler/QuestPackageManager-Rust

      - name: QPM Restore
        run: |
          chmod +x ./QPM/qpm-rust
          ./QPM/qpm-rust restore

      - name: QPM Edit Version
        run: |
          ./QPM/qpm-rust package edit --version "${{ steps.get_tag_version.outputs.VERSION }}"

      # Commit the change to the package, .vscode/c_cpp_properties.json, and Android.mk
      - name: Configure commit
        run: |
          git config user.name "Github Actions"
          git config user.email "<>"
      - name: Commit Edit Version
        run: |
          git add qpm.json
          git commit -m "Update Version and post restore"
      # Then, we want to use the commit we have just made, and force push our tag to that commit
      - name: Get Commit ID
        id: get_commit_id
        run: |
          echo `git rev-parse HEAD`
          echo ::set-output name=ID::`git rev-parse HEAD`

      - name: Force create tag
        run: |
          git tag --force ${{ steps.get_tag_version.outputs.TAG }} ${{ steps.get_commid_id.outputs.ID }}

      # Then, push, upload our artifacts, modify the config file to have soLink and debugSoLink
      - name: Create and push version specific branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git branch version-${module_id}-${{ steps.get_tag_version.outputs.TAG }}
          git push -u origin version-${module_id}-${{ steps.get_tag_version.outputs.TAG }} --force --tags

      # Get release that was created for this tag
      - name: Get Release
        uses: octokit/request-action@v2.x
        id: get_release
        with:
          route: GET /repos/:repository/releases/tags/${{ steps.get_tag_version.outputs.TAG }}
          repository: ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Release Upload URL
        id: get_upload_url
        run: |
          url=$(echo "$response" | jq -r '.upload_url')
          echo $url
          echo "::set-output name=upload_url::$url"
        env:
          response: ${{ steps.get_release.outputs.data }}
      - name: Get Library Name
        id: libname
        run: |
          cd ${GITHUB_WORKSPACE}/${build_path}
          pattern="lib${module_id}*.a"
          files=( $pattern )
          echo ::set-output name=NAME::"${files[0]}"
      # Upload our release assets
      - name: Upload Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
          asset_path: ${{ steps.libname.outputs.NAME }}
          asset_name: ${{ steps.libname.outputs.NAME }}
          asset_content_type: application/octet-stream

      - name: Change QPM Package Info
        run: |
          ./QPM/qpm-rust package edit-extra --branchName "version-${module_id}-${{ steps.get_tag_version.outputs.TAG }}"
          ./QPM/qpm-rust package edit-extra --soLink "${{ steps.upload_release_asset.outputs.browser_download_url }}"

      - name: Commit Changed package info
        run: |
          git add qpm.json --force
          git commit -m "Updated qpm.json and add headers"

      # Then, we want to use the commit we have just made, and force push our tag to that commit
      - name: Get Commit ID
        id: get_created_commit_id
        run: |
          echo `git rev-parse HEAD`
          echo ::set-output name=ID::`git rev-parse HEAD`

      - name: Push New Commit and Tag
        run: |
          git push origin HEAD:version-${module_id}-${{ steps.get_tag_version.outputs.TAG }} --force
          git tag --force ${{ steps.get_tag_version.outputs.TAG }} ${{ steps.get_created_commit_id.outputs.ID }}
          git push --tags --force

      #     - name: Merge this branch into whatever branch we were originally built off of.
      #       TODO

      - name: QPM Publish
        run: ./QPM/qpm-rust publish
